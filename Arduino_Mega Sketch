/************************************************************
* The Purpose of this sketch is to act as the physical hub 
* for low cost arduino sensors and controllers, to communicate with an MQTT 
* server hosted on our local Raspberry Pi.
* Process of the Code
* - Connect to Network over Ethernet
* - Control the function of a 1-, 2-, 4-, 8-, 16- channel Relay
* - Communicate with a MQTT Server on the same network
* -----------------------------------------------------------
*************************************************************/
/************************************************************
* Libraries                                                 *
*************************************************************/
 #include <SPI.h>
 #include <Ethernet.h>
 #include <PubSubClient.h>
 #include <DHT.h>

/*************************************************************
 * Ethernet Definitions
 *************************************************************/
// Update these with values suitable for your network.

//This will be the MAC address of our Arduino on the network
byte mac[]    = {  0xDE, 0xED, 0xBA, 0xFE, 0xFE, 0xED };

//Arduino Ethernet Static IP
IPAddress ip(192, 168, 5, 105);

EthernetClient ethClient;

/**************************************************************
 * MQTT Section                                               *
 **************************************************************/
//IP Address of your MQTT Broker
IPAddress server(192, 168, 5, 110);

PubSubClient client(ethClient);

/*************************************************************
 * Lighting Section                                          *
 *************************************************************/
const int lr_r = 2;  //Living Room Red
const int lr_g = 3;  //Living Room Green
const int lr_b = 4;  //Living Room Blue
const int k_r = 5;   //Kitchen Red
const int k_g = 6;   //Kitchen Green
const int k_b = 7;   //Kitchen Blue
const int br_r = 8;  //Bedroom Red
const int br_g = 9;  //Bedroom Green
const int br_b = 10; //Bedroom Blue

const int e_light = 15;  //Engine Light (On/Off)
const int d_light = 16;  //Driver Area Light (On/Off)
const int lr_light = 17; //living Area Light (On/Off)
const int k_light = 18;  //Kitchen Light (On/Off)
const int b_light = 19;  //Bathroom light (On/Off)
const int br_light = 20; //Bedroom Light (On/Off)
const int g_light = 21;  //Garage Light (On/Off)
const int ex_light = 22; //Exterior Lighting (On/Off)


/*************************************************************
 * Relay Section                                             *
 *************************************************************/
//Digital Pins to connect to relay control 
const int relay1 = 23; //Fresh Water Pump
const int relay2 = 24; //Grey Water Pump
const int relay3 = 25; //Hot Water Heater (On/Off)
const int relay4 = 26; //Fridge
const int relay5 = 27; //Air Conditioner
const int relay6 = 28; //Heater
const int relay7 = 29; //Living Room TV
const int relay8 = 30; //Bedroom TV
const int relay9 = 31;
const int relay10 = 32;
const int relay11 = 33;
const int relay12 = 34;
const int relay13 = 35;
const int relay14 = 36;
const int relay15 = 37;
const int relay16 = 38;

/*************************************************************
* Temperature / Humidity Section
**************************************************************/
const int dht1 = 39; //Engine Bay
const int dht2 = 40; //Driver Area
const int dht3 = 41; //Kitchen Area
const int dht4 = 42; //Bathroom 
const int dht5 = 43; //Bedroom 
const int dht6 = 44; //Garage
const int dht7 = 45; //External DHT

/*************************************************************
 * User Defined Functions Section
 *************************************************************/
void callback(char* topic, byte* payload, unsigned int length);
void reconnect();
void readTemps();
  

/****************************************************************************
 * Sketch Setup Section                                                     *
 ****************************************************************************/
void setup() 
{
  // put your setup code here, to run once:

  Serial.begin(57600);
  while(!Serial)
    {
      ;//Wait for Serial
    }

  Serial.println("Welcome to Rojowe's Mega Hub");
  Serial.println("Please wait while Setup finishes...");

  Serial.println("Setting Ethernet connection...");
  
  Ethernet.begin(mac, ip);
  //Allow the hardware a moment to connect  
  Serial.print("connecting...");
  delay(1500);

  client.setServer(server, 1883);
  client.setCallback(callback);

  pinMode(relay1, OUTPUT);
  pinMode(relay2, OUTPUT);
  pinMode(relay3, OUTPUT);
  pinMode(relay4, OUTPUT);
  pinMode(relay5, OUTPUT);
  pinMode(relay6, OUTPUT);
  pinMode(relay7, OUTPUT);
  pinMode(relay8, OUTPUT);
  pinMode(relay9, OUTPUT);
  pinMode(relay10, OUTPUT);
  pinMode(relay11, OUTPUT);
  pinMode(relay12, OUTPUT);
  pinMode(relay13, OUTPUT);
  pinMode(relay14, OUTPUT);
  pinMode(relay15, OUTPUT);
  pinMode(relay16, OUTPUT);
  

  digitalWrite(relay1, LOW);
  digitalWrite(relay2, LOW);
  digitalWrite(relay3, LOW);
  digitalWrite(relay4, LOW);
  digitalWrite(relay5, LOW);
  digitalWrite(relay6, LOW);
  digitalWrite(relay7, LOW);
  digitalWrite(relay8, LOW);
  digitalWrite(relay9, LOW);
  digitalWrite(relay10, LOW);
  digitalWrite(relay11, LOW);
  digitalWrite(relay12, LOW);
  digitalWrite(relay13, LOW);
  digitalWrite(relay14, LOW);
  digitalWrite(relay15, LOW);
  digitalWrite(relay16, LOW);

  digitalWrite(e_light, LOW);
  digitalWrite(d_light, LOW);
  digitalWrite(lr_light, LOW);
  digitalWrite(k_light, LOW);
  digitalWrite(b_light, LOW);
  digitalWrite(br_light, LOW);
  digitalWrite(g_light, LOW);
  digitalWrite(ex_light, LOW);
  
  dht.begin();
}

/*************************************************************************************************
 * Sketch Loop Section                                                                           *
 *************************************************************************************************/
void loop() 
{
  // put your main code here, to run repeatedly:
  if (!client.connected())
    {
      Serial.println();
      Serial.println("Connecting to MQTT server...");
      reconnect();
    }
  client.loop();
  
  //2 Second delay between temperature readings
  while(millis.now() - millisLast >= 2000)
  {
    readTemps();
  }
}
/***************************************************************************************************/
/*************************************************************
 * User Defined Functions Section
 *************************************************************/
void callback(char* topic, byte* payload, unsigned int length) 
{  
  Serial.print(topic);
  Serial.print(" ");
    
  for (int i = 0; i < length; i++) 
  {
    Serial.print((char)payload[i]);
  
    if (strcmp(topic,"mega_hub/relay1")==0)
    {
      if((char)payload[0] == '0')
      {
        digitalWrite(relay1, HIGH);
      }
      else if((char)payload[0] == '1')
      {
        digitalWrite(relay1, LOW);
      }
      Serial.println();
    }
    else if(strcmp(topic,"mega_hub/relay2")==0)
    {
      if((char)payload[0] == '0')
      {
        digitalWrite(relay2, HIGH);
      }
      else if((char)payload[0] == '1')
      {
        digitalWrite(relay2, LOW);
      }
      Serial.println();
    }
    else if(strcmp(topic,"mega_hub/relay3")==0)
    {
      if((char)payload[0] == '0')
      {
        digitalWrite(relay3, HIGH);
      }
      else if((char)payload[0] == '1')
      {
        digitalWrite(relay3, LOW);
      }
      Serial.println();
    }
    else if(strcmp(topic,"mega_hub/relay4")==0)
    {
      if((char)payload[0] == '0')
      {
        digitalWrite(relay4, HIGH);
      }
      else if((char)payload[0] == '1')
      {
        digitalWrite(relay4, LOW);
      }
      Serial.println();
    }
    if (strcmp(topic,"mega_hub/relay5")==0)
    {
      if((char)payload[0] == '0')
      {
        digitalWrite(relay5, HIGH);
      }
      else if((char)payload[0] == '1')
      {
        digitalWrite(relay5, LOW);
      }
      Serial.println();
    }
    else if(strcmp(topic,"mega_hub/relay6")==0)
    {
      if((char)payload[0] == '0')
      {
        digitalWrite(relay6, HIGH);
      }
      else if((char)payload[0] == '1')
      {
        digitalWrite(relay6, LOW);
      }
      Serial.println();
    }
    else if(strcmp(topic,"mega_hub/relay7")==0)
    {
      if((char)payload[0] == '0')
      {
        digitalWrite(relay7, HIGH);
      }
      else if((char)payload[0] == '1')
      {
        digitalWrite(relay7, LOW);
      }
      Serial.println();
    }
    else if(strcmp(topic,"mega_hub/relay8")==0)
    {
      if((char)payload[0] == '0')
      {
        digitalWrite(relay8, HIGH);
      }
      else if((char)payload[0] == '1')
      {
        digitalWrite(relay8, LOW);
      }
      Serial.println();
    }
  }
}


void reconnect() 
{
  // Loop until we're reconnected
  while (!client.connected()) 
  {
    // Attempt to connect
    if (client.connect("arduinoClient")) 
    {
      Serial.println("connected");
      // Once connected, publish an announcement...
      client.publish("openhab2","hello world");
      // ... and resubscribe
      client.subscribe("mega_hub/relay1");
      client.subscribe("mega_hub/relay2");
      client.subscribe("mega_hub/relay3");
      client.subscribe("mega_hub/relay4");
      client.subscribe("mega_hub/relay5");
      client.subscribe("mega_hub/relay6");
      client.subscribe("mega_hub/relay7");
      client.subscribe("mega_hub/relay8");
    } 
    else 
    {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }   
}

void readTemps()
{
  //Read data and store it to variables hum and temp
  hum = dht.readHumidity();
  temp= dht.readTemperature();
  
  /* Needs To Be Changed To Work with MQTT */
  
  //Print temp and humidity values to serial monitor
  Serial.print("Humidity: ");
  Serial.print(hum);
  Serial.print(" %, Temp: ");
  Serial.print(temp);
  Serial.println(" Celsius");
}
